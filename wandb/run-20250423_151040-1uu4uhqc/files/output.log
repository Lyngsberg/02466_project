[34m[1mwandb[39m[22m: [33mWARNING[39m Ignoring project 'Fagprojekt' when running a sweep.
[34m[1mwandb[39m[22m: [33mWARNING[39m Ignoring entity 'lyngsberg-danmarks-tekniske-universitet-dtu' when running a sweep.
Using device: cuda
/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py:69: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  x, y = torch.load(data_path)
/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py:72: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  x_train = torch.tensor(x_train, dtype=torch.float32).to(device)
/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py:73: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  x_test = torch.tensor(x_test, dtype=torch.float32).to(device)
/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py:74: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  y_train = torch.tensor(y_train, dtype=torch.float32).to(device).view(-1, 1)
/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py:75: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  y_test = torch.tensor(y_test, dtype=torch.float32).to(device).view(-1, 1)
Traceback (most recent call last):
  File "/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py", line 179, in <module>
    train_model()
    ~~~~~~~~~~~^^
  File "/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py", line 105, in train_model
    optimizer.step(closure)
    ~~~~~~~~~~~~~~^^^^^^^^^
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/optim/optimizer.py", line 487, in wrapper
    out = func(*args, **kwargs)
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/optim/lbfgs.py", line 330, in step
    orig_loss = closure()
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
  File "/home/lyngsberg/fagproject/02466_project/fagproject/src/project/sweep_train.py", line 99, in closure
    predictions = model(x_train)
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/lyngsberg/fagproject/02466_project/fagproject/src/project/PN_models.py", line 33, in forward
    pn_outputs = torch.cat([neuron(x) for neuron in self.pn_neuron], dim=1)
                            ~~~~~~^^^
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/lyngsberg/miniconda3/envs/fagprojekt/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/lyngsberg/fagproject/02466_project/fagproject/src/project/PN_models.py", line 19, in forward
    z = torch.cat((x, ones), dim=1)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu! (when checking argument for argument tensors in method wrapper_CUDA_cat)